{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1b00e3d6-b864-49fd-ae3e-e8cef12d36ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Age   Salary   Purchased\n",
      "0   19    20000           0\n",
      "1   25    19000           0\n",
      "2   32   160000           1\n",
      "3   45    55000           1\n",
      "4   28    35000           0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('example.csv')\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b09723bd-97c7-408c-8749-f46b9acbf87b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5, 4))\n",
    "plt.scatter(df['Age'], df[' Purchased'], c=df[' Purchased'], cmap='bwr', label=' Purchased')  \n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Purchased (0 = No, 1 = Yes)')\n",
    "plt.title('Abhi Project')\n",
    "plt.legend(['No Purchase', 'Purchase'])  \n",
    "plt.grid(True) \n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ec64e921-1022-4d2b-b1a9-0fe8f53204a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction for Age 32: Will purchase\n",
      "Probability: [[0.15015646 0.84984354]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\INDRANI\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\INDRANI\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Features and target variable\n",
    "X = df[['Age']]  # Use uppercase X for features\n",
    "y = df[' Purchased']  # Use lowercase y and single brackets for the target variable\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create and train the logistic regression model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Prediction\n",
    "new_age = [[32]]\n",
    "prediction = model.predict(new_age)\n",
    "probability = model.predict_proba(new_age)\n",
    "\n",
    "# Print the result\n",
    "print(f\"Prediction for Age {new_age[0][0]}: {'Will purchase' if prediction[0] == 1 else 'Will not purchase'}\")\n",
    "print(f\"Probability: {probability}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0040385c-3b4d-4f27-9ddd-63d83e1c9b8b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
